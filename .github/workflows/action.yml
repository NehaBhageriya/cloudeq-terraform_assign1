
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: Terraform actions

# env:
#   working-directory: ./modules/example

on:
 push: 
  branches: ["main","master"]

 workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
 
    env:
      AWS_DEFAULT_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      working_folder: ./modules/example
      
    defaults:
      run:
        working-directory: ${{ env.working_folder }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
     
    - name: Terraform Init
      run: terraform init
      # working-directory: ./modules/example

    - name: Terraform Validate
      run: terraform validate
      # working-directory: ./modules/example

    - name: Terraform Plan
      run: terraform plan 
      # working-directory: ./modules/example
      
    - name: Terraform Apply
      run: terraform apply -auto-approve 
      # working-directory: ./modules/example

    - name: Terraform Destroy
      run: terraform destroy -auto-approve 
      # working-directory: ./modules/example


